/* global fetch */

const { getSelectorId, awaitableTimeout } = require('./utils')

export class cssRequest {
  constructor (
    selector,
    pageUrl,
    requestType,
    walServerHost,
    walAuthToken,
    walServerUser,
    walRequestId,
    walServerTimeout = 180.0,
  ) {
    this.selector = selector
    this.selectorType = 'css selector'
    this.pageUrl = pageUrl
    this.requestType = requestType
    this.walServerHost = walServerHost
    this.walAuthToken = walAuthToken
    this.walServerUser = walServerUser
    this.walServerTimeout = walServerTimeout
    this.walServerRequestId = walRequestId
    this.sentAt = Math.ceil(Date.now() / 1000)

    this.currentElements = []
    this.bodyHTML = []
    this.allElements = []
    this.pageScreenshot = null
    this.browserProperties = null
  }

  async generateSelectorId () {
    // get the selectorId
    let { pathname: urlPath } = new URL(this.pageUrl)

    if (urlPath === '/') {
      urlPath = ''
    }

    this.selectorId = await getSelectorId(this.selector, urlPath)
  }

  addBodyHTML (htmlString) {
    this.bodyHTML = htmlString
  }

  addSelectedElement (serializedWebElement) {
    this.currentElements.push(serializedWebElement)
  }

  addSimilarElements (similarSerializedWebElements) {
    this.allElements = similarSerializedWebElements
  }

  addBrowserProperties (width, height, otherProperties = null) {
    this.browserProperties = {
      browserWidth: width,
      browserHeight: height,
      currentURL: this.pageUrl,
      ...otherProperties,
    }
  }

  addScreenshot (screenshot) {
    this.pageScreenshot = screenshot
  }

  toJSON (returnString = false) {
    let thisObj = {
      walServerRequestId: this.walServerRequestId,
      requestType: this.requestType,
      selector: this.selector,
      selectorType: this.selectorType,
      selectorId: this.selectorId,
      sessionId: 'cypress-cant-have-sessionIds',
      sentAt: this.sentAt,
      currentElements: this.currentElements,
      bodyHTML: this.bodyHTML,
      allElements: this.allElements,
      pageScreenshot: this.pageScreenshot,
      browserProperties: this.browserProperties,
    }

    if (returnString === true) {
      return JSON.stringify(thisObj, null, 2)
    }

    return thisObj
  }

  async sendFastHealRequest () {
    let postUrl = `${this.walServerHost}/heal/v1/css/${this.selectorId}`
    const postDataObj = {
      bodyHTML: this.bodyHTML,
      sessionId: 'cypress-cant-have-sessionIds',
      walServerRequestId: this.walServerRequestId,
      selector: this.selector,
    }
    const postData = JSON.stringify(postDataObj, null, 2)

    const resp = await fetch(
      postUrl,
      {
        headers: {
          Authorization: `Bearer: ${this.walAuthToken}`,
          'Content-Type': 'application/json',
        },
        body: postData,
        method: 'POST',
      },
    )

    if (!resp.ok) {
      return {
        status: 'failed',
        message: resp.statusText,
        response: {
          code: resp.status,
        },
      }
    }

    return await resp.json()
  }

  async sendTrainPostRequest () {
    let postUrl = `${this.walServerHost}/train/v1/css`
    let postData = this.toJSON(false)

    // keep the sentAt time up to date
    postData.sentAt = Math.ceil(Date.now() / 1000)
    this.sentAt = postData.sentAt
    postData = this.toJSON(true)

    const resp = await fetch(
      postUrl,
      {
        headers: {
          Authorization: `Bearer: ${this.walAuthToken}`,
          'Content-Type': 'application/json',
        },
        body: postData,
        method: 'POST',
      },
    )

    if (!resp.ok) {
      return {
        status: 'failed',
        message: resp.statusText,
        response: {
          code: resp.status,
        },
      }
    }

    return await resp.json()
  }

  async sendSuggestPostRequest () {
    let postUrl = `${this.walServerHost}/suggest/v1/css`
    let postData = this.toJSON(false)

    // keep the sentAt time up to date
    postData.sentAt = Math.ceil(Date.now() / 1000)
    this.sentAt = postData.sentAt
    postData = this.toJSON(true)

    const resp = await fetch(
      postUrl,
      {
        headers: {
          Authorization: `Bearer: ${this.walAuthToken}`,
          'Content-Type': 'application/json',
        },
        body: postData,
        method: 'POST',
      },
    )

    if (!resp.ok) {
      return {
        status: 'failed',
        message: resp.statusText,
        response: {
          code: resp.status,
        },
      }
    }

    return await resp.json()
  }

  async sendHealOrSuggestGetRequest (requestType = 'heal', cypressObj = null) {
    if (requestType !== 'heal' && requestType !== 'suggest') {
      return {
        status: 'failed',
        message: 'invalid request type; must be "suggest" or "heal"',
        response: null,
      }
    }

    let getUrl = `${this.walServerHost}/${requestType}/v1/css/${this.selectorId}`

    let currentTime = 0.0
    let currentTries = 0
    let currentWaitTime = 1.5
    let getResp
    let getData

    while (currentTime < this.walServerTimeout) {
      if (cypressObj !== null) {
        cypressObj.log({
          name: '[TGI]',
          message: `ðŸ’¤ Waiting for TG API ${requestType} response. Try: ${currentTries + 1}, wait time: ${currentWaitTime.toFixed(3)} seconds...`,
        })
      }

      await awaitableTimeout(currentWaitTime * 1000)
      getResp = await fetch(
        getUrl,
        {
          headers: {
            Authorization: `Bearer: ${this.walAuthToken}`,
          },
          method: 'GET',
        },
      )

      if (!getResp.ok) {
        return {
          status: 'failed',
          message: getResp.statusText,
          response: {
            code: getResp.status,
          },
        }
      }

      getData = await getResp.json()
      if (getData['status'] === 'success' || getData['status'] === 'warning' || getData['status'] === 'failed') {
        break
      }

      currentTries += 1
      currentWaitTime = Math.pow(1.75, currentTries - 1.0) + Math.random()
      if (currentWaitTime > 25.0) {
        currentWaitTime = 25.0 + Math.random()
      }

      currentTime += currentWaitTime
    }

    //
    // done with wait loop for WAL server heal response
    //
    return getData
  }
}
