// contains the main entrypoint for the Cypress plugin
/* global Cypress, cy */

const { startTestRequest, finishTestRequest, getInterceptorConfig } = require('./utils')
const { interceptorHook } = require('./hook')

const interceptorConfig = getInterceptorConfig(Cypress, false)
let walServerRequestId = null

// attach to the "test:before:run" event emitted by Cypress to get a WAL server request ID
Cypress.on('test:before:run', async () => {
  // get the spec name to populate the test run name
  interceptorConfig['testRunName'] = Cypress.spec.name

  // get the test request ID
  if (interceptorConfig['tgEnabled'] === true) {
    walServerRequestId = await startTestRequest(Cypress, interceptorConfig)
  }
})

// attach to the "test:after:run" event to close the test request
Cypress.on('test:after:run', async () => {
  if (interceptorConfig['tgEnabled'] === true && walServerRequestId !== null) {
    await finishTestRequest(walServerRequestId, interceptorConfig, Cypress)
  }
})

// overwrite the normal Cypress get() command to provide interceptor bits
Cypress.Commands.overwrite('get', (originalCommand, selector, options = {}) => {
  // gets the full Cypress state object
  // https://github.com/cypress-io/cypress-documentation/pull/805
  const cypressState = cy.state

  cy.wrap(
    { interceptorHook },
    { log: false },
  ).invoke(
    { log: false },
    'interceptorHook', selector, Cypress, cy, cypressState, walServerRequestId, interceptorConfig,
  ).then((interceptorResult) => {
    // take a screenshot after the interceptor was run
    if (interceptorResult['walServerRequestId'] !== undefined
      && interceptorResult['selectorId'] !== undefined
      && interceptorResult['specFileName'] !== undefined
      && interceptorResult['postRequestType'] !== undefined
      && interceptorResult['postSentAt'] !== undefined) {
      //
      // generate the screenshot filename and encode things we need into it
      //
      interceptorResult['screenshotFileName'] = `testgold_TG_${interceptorResult['walServerRequestId']}_TG_${interceptorResult['selectorId']}_TG_${interceptorResult['postRequestType']}_TG_${interceptorResult['postSentAt']}_TG_${interceptorResult['specFileName']}`

      // take the screenshot only if this is a valid screenshot item for us
      cy.screenshot(
        `${interceptorResult['screenshotFileName']}_TG_runner`,
        { log: true, capture: 'runner', scale: false },
      )
    }

    // yield the value correctly so Cypress Promise chains work
    return cy.wrap(interceptorResult, { log: false })
  }).then((interceptorResult) => {
    let selectorToUse = selector

    if (interceptorResult['status'] === 'selector failed, heal OK') {
      selectorToUse = interceptorResult['healedSelector']
    }

    // finally, run the original get() command with the updated selector if available
    // or the original selector if nothing happened
    return originalCommand(selectorToUse, options)
  })
})
